uses 'pango.lib';

module-header
{
	#include <pango-1.0/pango/pango.h>
	
	typedef struct pango_font_description_data
	{
		PangoFontDescription* font_description;
		
	} PangoFontDescriptionData;
	
	typedef struct pango_layout_data
	{
		PangoLayout* layout;
		
	} PangoLayoutData;
	
	typedef struct pango_layout_iter_data
	{
		PangoLayoutIter* iter;
		
	} PangoLayoutIterData;
	
	typedef struct pango_layout_line_data
	{
		PangoLayoutLine* line;
		
	} PangoLayoutLineData;
}

/**
 * @namespace Pango
 */
namespace Pango
{
	final static number SCALE = 1024;
	
	/**
	 * @class FontDescription
	 */
	class FontDescription
	{
		/**
		 * @function constructor
		 * @declaration function constructor( )
		 */
		native function constructor( )
		{
			PangoFontDescriptionData* font_description_data =
				fmalloc( sizeof( PangoFontDescriptionData ) );
			font_description_data->font_description = NULL;
			
			PangoFontDescription* font_description = pango_font_description_new();
			
			font_description_data->font_description = font_description;
			
			self->odata = font_description_data;
		}
		
		/**
		 * @function constructor
		 * @declaration function constructor( string str )
		 * @param string str
		 */
		native function constructor( string str )
		{
			PangoFontDescriptionData* font_description_data =
				fmalloc( sizeof( PangoFontDescriptionData ) );
			
			font_description_data->font_description = NULL;
			
			PangoFontDescription* font_description =
				pango_font_description_from_string( str->data );
			
			font_description_data->font_description = font_description;
			
			self->odata = font_description_data;
		}
		
		native function destructor( )
		{
			PangoFontDescriptionData* font_description_data = self->odata;
			
			if( font_description_data->font_description )
			{
				pango_font_description_free( font_description_data->font_description );
			}
			
			ffree( font_description_data );
		}
	}
	/**
	 * @end
	 */

	/**
	 * @class Layout
	 */
	class Layout
	{
		native function constructor( )
		{
			FE_RETURN_NULL_OBJECT;
		}
		
		/**
		 * @function constructor
		 * @declaration function constructor( object context )
		 */
		native function constructor( object context )
		{
			FE_RETURN_NULL_OBJECT;
			
			/*
			PangoLayoutData* layout_data = fmalloc( sizeof( PangoLayoutData ) );
			layout_data->layout = NULL;
			
			PangoLayout* layout = pango_layout_new( );
			
			layout_data->layout = layout;
			
			self->odata = layout_data;
			*/
		}
				
		native function destructor( )
		{
			PangoLayoutData* layout_data = self->odata;
			
			if( layout_data->layout != NULL )
			{
				g_object_unref( layout_data->layout );
			}
			
			ffree( layout_data );
		}
		
		/**
		 * @function @setText
		 * @declaration function setText( string text )
		 * @param string text
		 */
		native function setText( string text )
		{
			PangoLayoutData* layout_data = self->odata;
			pango_layout_set_text( layout_data->layout, text->data, -1 );
			FE_RETURN_VOID;
		}
		
		/**
		 * @function setWidth
		 * @declaration function setWidth( number width )
		 * @param number width
		 */
		native function setWidth( number width )
		{
			long width_long = 0;
			
			if( width < LONG_MAX )
			{
				width_long = (long)width;
			}
			
			PangoLayoutData* layout_data = self->odata;
			
			pango_layout_set_width( layout_data->layout, width_long );
			
			FE_RETURN_VOID;
		}
		
		/**
		 * @function setFontDescription
		 * @declaration function setFontDescription( object fontDescription )
		 * @param object fontDescription
		 */
		native function setFontDescription( object fontDescription )
		{
			FeriteNamespaceBucket* nsb = NULL;
			
			nsb = ferite_find_namespace( script, script->mainns, "Pango.FontDescription", FENS_CLS );
			
			if ( nsb != NULL )
			{
				FeriteClass* klass = nsb->data;
				
				if( ferite_class_is_subclass( klass, fontDescription->klass ) == FE_TRUE )
				{
					PangoFontDescriptionData* font_description_data = fontDescription->odata;
					PangoLayoutData* layout_data = self->odata;
					
					pango_layout_set_font_description( layout_data->layout,
						font_description_data->font_description );
				}
			}
			
			FE_RETURN_VOID;
		}
		
		/**
		 * @function getIter
		 * @declaration function getIter( )
		 */
		native function getIter( )
		{
			FeriteNamespaceBucket* nsb = NULL;
			
			FeriteClass* iter_class = NULL;
			FeriteVariable* iter_object = NULL;
			
			nsb = ferite_find_namespace( script, script->mainns, "Pango.LayoutIter", FENS_CLS );
			
			if ( nsb != NULL )
			{
				iter_class = nsb->data;
				
				iter_object = ferite_build_object( script, iter_class );
				UNMARK_VARIABLE_AS_DISPOSABLE( iter_object );
				
				PangoLayoutData* layout_data = self->odata;
				
				PangoLayoutIter* iter = pango_layout_get_iter( layout_data->layout );
				
				PangoLayoutIterData* iter_data = fmalloc( sizeof( PangoLayoutIterData ) );
				iter_data->iter = NULL;
				iter_data->iter = iter;
				
				VAO( iter_object )->odata = iter_data;
				
				FE_RETURN_OBJECT( VAO( iter_object ) );
			}
			
			FE_RETURN_NULL_OBJECT;
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class LayoutIter
	 */
	class LayoutIter
	{
		native function constructor( )
		{
			FE_RETURN_NULL_OBJECT;
		}
		
		native function destructor( )
		{
			PangoLayoutIterData* iter_data = self->odata;
			
			if( iter_data->iter )
			{
				pango_layout_iter_free( iter_data->iter );
			}
			
			ffree( iter_data );
		}
		
		/**
		 * @function getBaseline
		 * @declaration function getBaseLine( )
		 */
		native function getBaseline()
		{
			PangoLayoutIterData* iter_data = self->odata;
			long baseline = pango_layout_iter_get_baseline( iter_data->iter );
			FE_RETURN_LONG( baseline );
		}
		
		/**
		 * @function getLine
		 * @declaration function getLine( )
		 */
		native function getLine( )
		{
			FeriteNamespaceBucket* nsb = NULL;
			
			FeriteClass* line_class = NULL;
			FeriteVariable* line_object = NULL;
			
			nsb = ferite_find_namespace( script, script->mainns, "Pango.LayoutLine", FENS_CLS );
			
			if( nsb != NULL )
			{
				line_class = nsb->data;
				
				line_object = ferite_build_object( script, line_class );
				UNMARK_VARIABLE_AS_DISPOSABLE( line_object );
				
				PangoLayoutIterData* iter_data = self->odata;
				
				PangoLayoutLine* line = pango_layout_iter_get_line( iter_data->iter );
				
				PangoLayoutLineData* line_data = fmalloc( sizeof( PangoLayoutLineData ) );
				line_data->line = NULL;
				line_data->line = line;
				
				VAO( line_object )->odata = line_data;
				
				FE_RETURN_OBJECT( VAO( line_object ) );
			}
			
			FE_RETURN_NULL_OBJECT;
		}
		
		/**
		 * @function nextLine
		 * @declaration function nextLine( )
		 */
		native function nextLine( )
		{
			PangoLayoutIterData* iter_data = self->odata;
			
			gboolean not_on_last_line = pango_layout_iter_next_line( iter_data->iter );
			
			if(! not_on_last_line )
			{
				FE_RETURN_FALSE;
			}
			
			FE_RETURN_TRUE;
		}
		
		/**
		 * @function getLineYRange
		 * @declaration getLineYRange( )
		 */
		native function getLineYRange( )
		{
			PangoLayoutIterData* iter_data = self->odata;
			
			int y_start;
			int y_end;
			
			pango_layout_iter_get_line_yrange( iter_data->iter, &y_start, &y_end );
			
			FeriteVariable* fe_y_start = ferite_create_number_long_variable( script, "yStart", y_start, FE_STATIC );
			FeriteVariable* fe_y_end = ferite_create_number_long_variable( script, "yEnd", y_end, FE_STATIC );
			
			FeriteVariable* y_range = ferite_create_uarray_variable( script, "yRange", 2, FE_STATIC );
			
			ferite_uarray_add( script, VAUA( y_range ), fe_y_start, "start", FE_ARRAY_ADD_AT_END );
			ferite_uarray_add( script, VAUA( y_range ), fe_y_end, "end", FE_ARRAY_ADD_AT_END );
			
			FE_RETURN_VAR( y_range );
		}
		
		/**
		 * @function getLineExtents
		 * @declaration getLineExtents( )
		 */
		native function getLineExtents( )
		{
			FeriteNamespaceBucket* nsb = NULL;
			nsb = ferite_find_namespace( script, script->mainns, "Pango.Rectangle", FENS_CLS );
			
			if( nsb != NULL )
			{
				FeriteClass* rectangle_class = nsb->data;
								
				FeriteVariable* fe_ink_rect = ferite_build_object( script, rectangle_class );
				FeriteVariable* fe_logical_rect = ferite_build_object( script, rectangle_class );
								
				UNMARK_VARIABLE_AS_DISPOSABLE( fe_ink_rect );
				UNMARK_VARIABLE_AS_DISPOSABLE( fe_logical_rect );
				
				FeriteVariable* line_extents = ferite_create_uarray_variable( script, "lineExtents", 2, FE_STATIC );
				
				PangoRectangle* ink_rect = fmalloc( sizeof( PangoRectangle ) );
				PangoRectangle* logical_rect = fmalloc( sizeof( PangoRectangle ) );
				
				PangoLayoutIterData* iter_data = self->odata;
				
				pango_layout_iter_get_line_extents( iter_data->iter, ink_rect, logical_rect );
				
				VAO( fe_ink_rect )->odata = ink_rect;
				VAO( fe_logical_rect )->odata = logical_rect;
				
				ferite_uarray_add( script, VAUA( line_extents ), fe_ink_rect, "ink", FE_ARRAY_ADD_AT_END );
				ferite_uarray_add( script, VAUA( line_extents ), fe_logical_rect, "logical", FE_ARRAY_ADD_AT_END );
				
				FE_RETURN_VAR( line_extents );
			}
			
			FE_RETURN_NULL_OBJECT;
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class LayoutLine
	 */
	class LayoutLine
	{
		native function constructor( )
		{
			FE_RETURN_NULL_OBJECT;
		}
		
		native function destructor( )
		{
			PangoLayoutLineData* line_data = self->odata;
			
			if( line_data->line != NULL )
			{
				/* What should be done here? */
				/* pango_layout_line_unref( line_data->line ); */
			}
			
			ffree( line_data );
		}
	}
	/**
	 * @end
	 */

	/**
	 * @class Rectangle
	 */
	class Rectangle
	{
		/**
		 * @function constructor
		 * @declaration function constructor( )
		 */
		native function constructor( )
		{
			PangoRectangle* rectangle = fmalloc( sizeof( PangoRectangle ) );
			self->odata = rectangle;
		}
		
		native function destructor( )
		{
			PangoRectangle* rectangle = self->odata;			
			ffree( rectangle );
		}
		
		/**
		 * @function getX
		 * @declaration function getX( )
		 */
		native function getX( )
		{
			PangoRectangle* rectangle = self->odata;
			FE_RETURN_LONG( rectangle->x );
		}
		
		/**
		 * @function getY
		 * @declaration function getY( )
		 */
		native function getY( )
		{
			PangoRectangle* rectangle = self->odata;
			FE_RETURN_LONG( rectangle->y );
		}
		
		/**
		 * @function getWidth
		 * @declaration function getWidth( )
		 */
		native function getWidth( )
		{
			PangoRectangle* rectangle = self->odata;
			FE_RETURN_LONG( rectangle->width );
		}
		
		/**
		 * @function getHeight
		 * @declaration function getHeight( )
		 */
		native function getHeight( )
		{
			PangoRectangle* rectangle = self->odata;
			FE_RETURN_LONG( rectangle->height );
		}
	}
	/**
	 * @end
	 */
}
/**
 * @end
 */

